{"version":3,"sources":["socket/index.js","components/game/gameMessage/GameMessage.js","components/game/gameMessage/index.js","components/game/gameTrigger/GameTrigger.js","components/game/gameTrigger/index.js","components/grid/cell/Cell.js","components/grid/cell/index.js","components/grid/index.js","components/grid/Grid.js","components/game/scoreBoard/ScoreBoard.js","components/game/scoreBoard/index.js","components/game/Game.js","components/game/index.js","App.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","useSocketGameState","useState","response","setResponse","useEffect","on","data","disconnect","useSocketPlayerColor","emitStartGame","emit","emitKeyDown","key","color","Container","styled","div","GameMessage","countdown","winner","message","capitalize","GameTrigger","activeColors","size","onClick","Square","Cell","memo","Grid","handleKeydown","repeat","window","addEventListener","removeEventListener","board","map","row","x","y","Row","ScoreBoard","scores","val","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc081657.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst socket = socketIOClient('https://cd0ea6bbbd9e.ngrok.io');\n\nconst useSocketGameState = () => {\n  const [response, setResponse] = useState({});\n\n  useEffect(() => {\n    socket.on('GameState', data => {\n      setResponse(data);\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return response;\n};\n\nconst useSocketPlayerColor = () => {\n  const [response, setResponse] = useState();\n\n  useEffect(() => {\n    socket.on('PlayerColor', data => {\n      setResponse(data);\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  return response;\n};\n\nconst emitStartGame = () => {\n  socket.emit('StartGame');\n}\n\nconst emitKeyDown = (key, color) => {\n  socket.emit('KeyDown', { key, color });\n};\n\nexport {\n  useSocketGameState,\n  useSocketPlayerColor,\n  emitStartGame,\n  emitKeyDown,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport capitalize from 'lodash/capitalize';\nimport { useSocketGameState, useSocketPlayerColor } from '../../../socket';\n\nconst Container = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  font-size: 3vw;\n`;\n\nconst GameMessage = () => {\n  const color = useSocketPlayerColor();\n  const { countdown, winner } = useSocketGameState();\n  let message = '';\n  if (winner === 'DRAW') {\n    message = 'Draw';\n  } else if (winner) {\n    message = `${capitalize(winner)} wins!`;\n  } else if (countdown) {\n    message = countdown;\n  } else if (color) {\n    message = `You are ${color}`;\n  }\n  return (\n    <Container>\n      {message}\n    </Container>\n  );\n}\n\nexport default GameMessage;\n","import GameMessage from './GameMessage';\n\nexport default GameMessage;","import React from 'react';\nimport styled from 'styled-components';\nimport size from 'lodash/size';\nimport { emitStartGame, useSocketGameState } from '../../../socket';\n\nconst Container = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  font-size: 3vw;\n`;\n\nconst GameTrigger = () => {\n  const { countdown, activeColors } = useSocketGameState();\n  if (size(activeColors) < 2) {\n    return null;\n  }\n  return (\n    <Container onClick={emitStartGame}>\n      {countdown === null && 'Click me to start'}\n    </Container>\n  );\n}\n\nexport default GameTrigger;\n","import GameTrigger from './GameTrigger';\n\nexport default GameTrigger;","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nconst Square = styled.div`\n  display: flex;\n  border: 1px solid black;\n  background-color: ${({ color }) => color ? color : 'white' };\n  height: 0.5vw;\n  width: 0.5vw;\n`;\n\nconst Cell = ({ color }) => {\n  return (\n    <Square color={color} />\n  );\n}\n\nexport default memo(Cell);\n","import Cell from './Cell';\n\nexport default Cell;","import Grid from './Grid';\n\nexport default Grid;","import React, { useEffect } from 'react';\nimport map from 'lodash/map';\n\nimport Cell from './cell';\nimport { emitKeyDown, useSocketGameState, useSocketPlayerColor } from '../../socket';\n\nconst UP = 'u';\nconst DOWN = 'd';\nconst LEFT = 'l';\nconst RIGHT = 'r';\n\nconst Grid = () => {\n  const color = useSocketPlayerColor();\n\n  const handleKeydown = ({ key, repeat }) => {\n    if (repeat) {\n      return;\n    }\n    switch(key) {\n      case 'ArrowUp':\n      case 'w':\n        emitKeyDown(UP, color);\n        break;\n      case 'ArrowDown':\n      case 's':\n        emitKeyDown(DOWN, color);\n        break;\n      case 'ArrowLeft':\n      case 'a':\n        emitKeyDown(LEFT, color);\n        break;\n      case 'ArrowRight':\n      case 'd':\n        emitKeyDown(RIGHT, color);\n        break;\n      default:\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  });\n\n  const { board } = useSocketGameState();\n\n  return (\n    map(board, (row, x) => (\n      <div key={x}>{map(row, (color, y) => (\n        <Cell key={`${x}${y}`} color={color} />\n      ))}</div>\n    ))\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport map from 'lodash/map';\nimport { useSocketGameState } from '../../../socket';\n\nconst Container = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  font-size: 3vw;\n`;\n\nconst Row = styled.div`\n  background-color: ${({ color }) => color };\n  color: white;\n  width: 4vw;\n  padding-left: 0.5vw;\n  margin-left: 0.5vw;\n  padding-right: 0.5vw;\n  margin-right: 0.5vw;\n  display: inline;\n`;\n\nconst GameMessage = () => {\n  const { scores } = useSocketGameState();\n  return (\n    <Container>\n      {map(scores, (val, key) => {\n        return <Row color={key}>{val}</Row>;\n      })}\n    </Container>\n  );\n}\n\nexport default GameMessage;\n","import ScoreBoard from './ScoreBoard';\n\nexport default ScoreBoard;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport GameMessage from './gameMessage';\nimport GameTrigger from './gameTrigger';\nimport Grid from '../grid';\nimport ScoreBoard from './scoreBoard';\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 5%;\n`;\n\nconst Game = () => {\n  return (\n    <Container>\n      <ScoreBoard />\n      <GameMessage />\n      <Grid />\n      <GameTrigger />\n    </Container>\n  );\n}\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;","import React from 'react';\n\nimport Game from './components/game';\n\nconst App = () => {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}